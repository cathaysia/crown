use crate::password_hash::argon2::{derive_key, ArgonMode};

const GEN_KAT_PASSWORD: [u8; 32] = [
    0x01u8, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01,
];
const GEN_KAT_SALT: [u8; 16] = [
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
];
const GEN_KAT_SECRET: [u8; 8] = [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03];
const GEN_KAT_AAD: [u8; 12] = [
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
];

#[test]
fn test_argon2d() {
    const WANT: [u8; 32] = [
        0x51, 0x2b, 0x39, 0x1b, 0x6f, 0x11, 0x62, 0x97, 0x53, 0x71, 0xd3, 0x09, 0x19, 0x73, 0x42,
        0x94, 0xf8, 0x68, 0xe3, 0xbe, 0x39, 0x84, 0xf3, 0xc1, 0xa1, 0x3a, 0x4d, 0xb9, 0xfa, 0xbe,
        0x4a, 0xcb,
    ];

    let hash = derive_key(
        ArgonMode::ARGON2D,
        &GEN_KAT_PASSWORD,
        &GEN_KAT_SALT,
        &GEN_KAT_SECRET,
        &GEN_KAT_AAD,
        3,
        32,
        4,
        32,
    )
    .unwrap();

    assert_eq!(WANT, hash.as_slice());
}
