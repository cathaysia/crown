use super::Camellia;
use crate::block::BlockCipher;
#[test]
fn test_camellia() {
    let mut key = [0u8; 16];
    rand::fill(&mut key);
    let enc = super::Camellia::new(&key, Some(18)).unwrap();
    for _ in 0..1000 {
        let mut inout = [0u8; 16];
        rand::fill(&mut inout);
        let mut out = inout;
        enc.encrypt(&mut out);
        enc.decrypt(&mut out);
        assert_eq!(inout, out);
    }
}

#[test]
fn test_gloden() {
    struct TestCase {
        keylen: usize,
        key: [u8; 32],
        pt: [u8; 16],
        ct: [u8; 16],
    }
    const TESTCASE: [TestCase; 4] = [
        TestCase {
            keylen: 16,
            key: [
                0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
                0x32, 0x10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ],
            pt: [
                0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
                0x32, 0x10,
            ],
            ct: [
                0x67, 0x67, 0x31, 0x38, 0x54, 0x96, 0x69, 0x73, 0x8, 0x57, 0x6, 0x56, 0x48, 0xea,
                0xbe, 0x43,
            ],
        },
        TestCase {
            keylen: 24,
            key: [
                0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
                0x32, 0x10, 0, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0, 0, 0, 0, 0, 0, 0, 0,
            ],
            pt: [
                0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
                0x32, 0x10,
            ],
            ct: [
                0xb4, 0x99, 0x34, 0x1, 0xb3, 0xe9, 0x96, 0xf8, 0x4e, 0xe5, 0xce, 0xe7, 0xd7, 0x9b,
                0x9, 0xb9,
            ],
        },
        TestCase {
            keylen: 32,
            key: [
                0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
                0x32, 0x10, 0, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb,
                0xcc, 0xdd, 0xee, 0xff,
            ],
            pt: [
                0x1, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54,
                0x32, 0x10,
            ],
            ct: [
                0x9a, 0xcc, 0x23, 0x7d, 0xff, 0x16, 0xd7, 0x6c, 0x20, 0xef, 0x7c, 0x91, 0x9e, 0x3a,
                0x75, 0x9,
            ],
        },
        TestCase {
            keylen: 32,
            key: [
                0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d,
                0x77, 0x81, 0x1f, 0x35, 0x2c, 0x7, 0x3b, 0x61, 0x8, 0xd7, 0x2d, 0x98, 0x10, 0xa3,
                0x9, 0x14, 0xdf, 0xf4,
            ],
            pt: [
                0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c,
                0x37, 0x10,
            ],
            ct: [
                0x79, 0x60, 0x10, 0x9f, 0xb6, 0xdc, 0x42, 0x94, 0x7f, 0xcf, 0xe5, 0x9e, 0xa3, 0xc5,
                0xeb, 0x6b,
            ],
        },
    ];

    for TestCase {
        keylen,
        key,
        pt,
        ct,
    } in TESTCASE
    {
        let cipher = Camellia::new(&key[..keylen], Some(0)).unwrap();
        let mut pt_copy = pt;
        cipher.encrypt(&mut pt_copy);
        assert_eq!(ct, pt_copy);
        cipher.decrypt(&mut pt_copy);
        assert_eq!(pt, pt_copy);
    }
}
