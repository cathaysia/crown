use super::*;
use crate::block::BlockCipher;

struct KasumiTest {
    key: [u8; 16],
    pt: [u8; 8],
    ct: [u8; 8],
}

const KASUMI_TESTS: &[KasumiTest] = &[
    KasumiTest {
        key: [
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ],
        pt: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ct: [0x4B, 0x58, 0xA7, 0x71, 0xAF, 0xC7, 0xE5, 0xE8],
    },
    KasumiTest {
        key: [
            0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ],
        pt: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ct: [0x7E, 0xEF, 0x11, 0x3C, 0x95, 0xBB, 0x5A, 0x77],
    },
    KasumiTest {
        key: [
            0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ],
        pt: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ct: [0x5F, 0x14, 0x06, 0x86, 0xD7, 0xAD, 0x5A, 0x39],
    },
    KasumiTest {
        key: [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01,
        ],
        pt: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ct: [0x2E, 0x14, 0x91, 0xCF, 0x70, 0xAA, 0x46, 0x5D],
    },
    KasumiTest {
        key: [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00,
        ],
        pt: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        ct: [0xB5, 0x45, 0x86, 0xF4, 0xAB, 0x9A, 0xE5, 0x46],
    },
];

#[test]
fn kasumi_test() {
    for (i, test) in KASUMI_TESTS.iter().enumerate() {
        let kasumi = Kasumi::new(&test.key).expect("Failed to create Kasumi instance");

        let mut encrypt_buf = test.pt;
        kasumi.encrypt_block(&mut encrypt_buf);
        assert_eq!(
            encrypt_buf, test.ct,
            "Kasumi Encrypt test {} failed: expected {:02x?}, got {:02x?}",
            i, test.ct, encrypt_buf
        );

        let mut decrypt_buf = test.ct;
        kasumi.decrypt_block(&mut decrypt_buf);
        assert_eq!(
            decrypt_buf, test.pt,
            "Kasumi Decrypt test {} failed: expected {:02x?}, got {:02x?}",
            i, test.pt, decrypt_buf
        );
    }
}
