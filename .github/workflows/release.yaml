name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-crate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: setup env
        run: |
          sudo apt update -y
          sudo apt install build-essential gcc cpp libclang-dev openssl libssl-dev -y

      - name: install Rust 1.85.0
        uses: dtolnay/rust-toolchain@1.85.0

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: publish crown-derive crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        working-directory: crates/crown-derive/
        run: |
          cargo publish --allow-dirty

      - name: publish crown crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: |
          cargo publish --allow-dirty

      - name: publish crown-bin crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        working-directory: crates/crown-bin/
        run: |
          cargo publish --allow-dirty

  build-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - x86_64-pc-windows-gnu
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: setup env
        run: |
          sudo apt update -y
          sudo apt install build-essential gcc cpp libclang-dev openssl libssl-dev -y

      - name: install Rust 1.85.0
        uses: dtolnay/rust-toolchain@1.85.0

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: build crown-bin
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: |
          cd crates/crown-bin
          cross build --release --target ${{ matrix.target }} --no-default-features

      - name: build c bindings
        if: ${{ !contains(matrix.target, 'musl') }}
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: |
          cd bindings/c
          cross build --release --target ${{ matrix.target }} --no-default-features

      - name: create sysroot structure
        run: |
          mkdir -p sysroot/bin
          mkdir -p sysroot/lib
          mkdir -p sysroot/include

          # Copy binary
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp crates/crown-bin/target/${{ matrix.target }}/release/crown.exe sysroot/bin/
          else
            cp crates/crown-bin/target/${{ matrix.target }}/release/crown sysroot/bin/
          fi

          # Copy library with correct extension
          if [[ "${{ matrix.target }}" != *"musl"* ]]; then
            if [[ "${{ matrix.target }}" == *"windows"* ]]; then
              cp target/${{ matrix.target }}/release/crown.dll sysroot/lib/
            elif [[ "${{ matrix.target }}" == *"apple"* ]]; then
              cp target/${{ matrix.target }}/release/libcrown.dylib sysroot/lib/
            else
              cp target/${{ matrix.target }}/release/libcrown.so sysroot/lib/
            fi

            # Copy header file generated by build.rs
            cp bindings/c/include/crown.h sysroot/include/
          fi


      - name: create archive
        run: |
          tar -cJf ${{ matrix.target }}.tar.xz -C sysroot .

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}.tar.xz

  create-release:
    needs: [publish-crate, build-cross]
    permissions:
      contents: write
      discussions: write
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: list artifacts
        run: |
          echo "Listing artifacts directory structure:"
          ls artifacts/**/*

      - name: create release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*.tar.xz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
