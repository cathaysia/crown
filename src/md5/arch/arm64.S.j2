// ARM64 MD5 implementation converted from Go assembly
// x0 = dig pointer, x1 = p pointer, x2 = p_len

// Mask length to 64-byte blocks and check if zero
and {tmp}, {p_len}, #-64
cbz {tmp}, 2f

// Calculate end pointer
add {end}, {p_ptr}, {tmp}

// Load initial digest values
ldp {a}, {b}, [{dig_ptr}]
ldp {c}, {d}, [{dig_ptr}, #8]

1: // loop
// Save initial values
mov {save_a}, {a}
mov {save_b}, {b}
mov {save_c}, {c}
mov {save_d}, {d}

// Load first word and initialize
ldr {w}, [{p_ptr}]
mov {tmp2}, {d}

{% macro ROUND1(a, b, c, d, index, const, shift) -%}
	ADDW	{{const}}, {{a}}; \
	ADDW	R8, {{ a }}; \
	MOVW	({{index*4}})(R1), R8; \
	EORW	{{ c }}, R9; \
	ANDW	{{ b }}, R9; \
	EORW	{{ d }}, R9; \
	ADDW	R9, {{ a }}; \
	RORW	$(32-shift), {{ a }}; \
	MOVW	{{ c }}, R9; \
	ADDW	{{ b }}, {{ a }}
{%- endmacro %}

// Round 1
{{ ROUND1('{a}', '{b}', '{c}', '{d}', 1, 0xd76aa478, 7) }}
{{ ROUND1('{d}', '{a}', '{b}', '{c}', 2, 0xe8c7b756, 12) }}
{{ ROUND1('{c}', '{d}', '{a}', '{b}', 3, 0x242070db, 17) }}
{{ ROUND1('{b}', '{c}', '{d}', '{a}', 4, 0xc1bdceee, 22) }}
{{ ROUND1('{a}', '{b}', '{c}', '{d}', 5, 0xf57c0faf, 7) }}
{{ ROUND1('{d}', '{a}', '{b}', '{c}', 6, 0x4787c62a, 12) }}
{{ ROUND1('{c}', '{d}', '{a}', '{b}', 7, 0xa8304613, 17) }}
{{ ROUND1('{b}', '{c}', '{d}', '{a}', 8, 0xfd469501, 22) }}
{{ ROUND1('{a}', '{b}', '{c}', '{d}', 9, 0x698098d8, 7) }}
{{ ROUND1('{d}', '{a}', '{b}', '{c}', 10, 0x8b44f7af, 12) }}
{{ ROUND1('{c}', '{d}', '{a}', '{b}', 11, 0xffff5bb1, 17) }}
{{ ROUND1('{b}', '{c}', '{d}', '{a}', 12, 0x895cd7be, 22) }}
{{ ROUND1('{a}', '{b}', '{c}', '{d}', 13, 0x6b901122, 7) }}
{{ ROUND1('{d}', '{a}', '{b}', '{c}', 14, 0xfd987193, 12) }}
{{ ROUND1('{c}', '{d}', '{a}', '{b}', 15, 0xa679438e, 17) }}
{{ ROUND1('{b}', '{c}', '{d}', '{a}', 0, 0x49b40821, 22) }}

// Setup for Round 2
ldr {w}, [{p_ptr}, #4]
mov {tmp2}, {d}
mov {tmp3}, {d}

{% macro ROUND2(a, b, c, d, index, const, shift) -%}
	ADDW	{{const}}, {{ a }}; \
	ADDW	R8, {{ a }}; \
	MOVW	({{index*4}})(R1), R8; \
	ANDW	{{ b }}, R10; \
	BICW	R9, {{ c }}, R9; \
	ORRW	R9, R10; \
	MOVW	{{ c }}, R9; \
	ADDW	R10, {{ a }}; \
	MOVW	{{ c }}, R10; \
	RORW	$(32-shift), {{ a }}; \
	ADDW	{{ b }}, {{ a }}
{%- endmacro %}

// Round 2
{{ ROUND2("w4", "w5", "w6", "w7", 6, "0xf61e2562", 5) }}
{{ ROUND2("w7", "w4", "w5", "w6", 11, "0xc040b340", 9) }}
{{ ROUND2("w6", "w7", "w4", "w5", 0, "0x265e5a51", 14) }}
{{ ROUND2("w5", "w6", "w7", "w4", 5, "0xe9b6c7aa", 20) }}
{{ ROUND2("w4", "w5", "w6", "w7", 10, "0xd62f105d", 5) }}
{{ ROUND2("w7", "w4", "w5", "w6", 15, "0x2441453", 9) }}
{{ ROUND2("w6", "w7", "w4", "w5", 4, "0xd8a1e681", 14) }}
{{ ROUND2("w5", "w6", "w7", "w4", 9, "0xe7d3fbc8", 20) }}
{{ ROUND2("w4", "w5", "w6", "w7", 14, "0x21e1cde6", 5) }}
{{ ROUND2("w7", "w4", "w5", "w6", 3, "0xc33707d6", 9) }}
{{ ROUND2("w6", "w7", "w4", "w5", 8, "0xf4d50d87", 14) }}
{{ ROUND2("w5", "w6", "w7", "w4", 13, "0x455a14ed", 20) }}
{{ ROUND2("w4", "w5", "w6", "w7", 2, "0xa9e3e905", 5) }}
{{ ROUND2("w7", "w4", "w5", "w6", 7, "0xfcefa3f8", 9) }}
{{ ROUND2("w6", "w7", "w4", "w5", 12, "0x676f02d9", 14) }}
{{ ROUND2("w5", "w6", "w7", "w4", 0, "0x8d2a4c8a", 20) }}

// Setup for Round 3
ldr w8, [x1, #20]
mov w9, w6

{% macro ROUND3(a, b, c, d, index, const, shift) -%}
add {{a}}, {{a}}, #{{const}}
add {{a}}, {{a}}, w8
ldr w8, [x1, #{{index * 4}}]
eor w9, w9, {{d}}
eor w9, w9, {{b}}
add {{a}}, {{a}}, w9
ror {{a}}, {{a}}, #{{32 - shift}}
mov w9, {{b}}
add {{a}}, {{a}}, {{b}}
{%- endmacro %}

// Round 3
{{ ROUND3("w4", "w5", "w6", "w7", 8, "0xfffa3942", 4) }}
{{ ROUND3("w7", "w4", "w5", "w6", 11, "0x8771f681", 11) }}
{{ ROUND3("w6", "w7", "w4", "w5", 14, "0x6d9d6122", 16) }}
{{ ROUND3("w5", "w6", "w7", "w4", 1, "0xfde5380c", 23) }}
{{ ROUND3("w4", "w5", "w6", "w7", 4, "0xa4beea44", 4) }}
{{ ROUND3("w7", "w4", "w5", "w6", 7, "0x4bdecfa9", 11) }}
{{ ROUND3("w6", "w7", "w4", "w5", 10, "0xf6bb4b60", 16) }}
{{ ROUND3("w5", "w6", "w7", "w4", 13, "0xbebfbc70", 23) }}
{{ ROUND3("w4", "w5", "w6", "w7", 0, "0x289b7ec6", 4) }}
{{ ROUND3("w7", "w4", "w5", "w6", 3, "0xeaa127fa", 11) }}
{{ ROUND3("w6", "w7", "w4", "w5", 6, "0xd4ef3085", 16) }}
{{ ROUND3("w5", "w6", "w7", "w4", 9, "0x4881d05", 23) }}
{{ ROUND3("w4", "w5", "w6", "w7", 12, "0xd9d4d039", 4) }}
{{ ROUND3("w7", "w4", "w5", "w6", 15, "0xe6db99e5", 11) }}
{{ ROUND3("w6", "w7", "w4", "w5", 2, "0x1fa27cf8", 16) }}
{{ ROUND3("w5", "w6", "w7", "w4", 0, "0xc4ac5665", 23) }}

// Setup for Round 4
ldr w8, [x1]
mvn w9, w7

{% macro ROUND4(a, b, c, d, index, const, shift) -%}
add {{a}}, {{a}}, #{{const}}
add {{a}}, {{a}}, w8
ldr w8, [x1, #{{index * 4}}]
orr w9, w9, {{b}}
eor w9, w9, {{c}}
add {{a}}, {{a}}, w9
ror {{a}}, {{a}}, #{{32 - shift}}
mvn w9, {{c}}
add {{a}}, {{a}}, {{b}}
{%- endmacro %}

// Round 4
{{ ROUND4("w4", "w5", "w6", "w7", 7, "0xf4292244", 6) }}
{{ ROUND4("w7", "w4", "w5", "w6", 14, "0x432aff97", 10) }}
{{ ROUND4("w6", "w7", "w4", "w5", 5, "0xab9423a7", 15) }}
{{ ROUND4("w5", "w6", "w7", "w4", 12, "0xfc93a039", 21) }}
{{ ROUND4("w4", "w5", "w6", "w7", 3, "0x655b59c3", 6) }}
{{ ROUND4("w7", "w4", "w5", "w6", 10, "0x8f0ccc92", 10) }}
{{ ROUND4("w6", "w7", "w4", "w5", 1, "0xffeff47d", 15) }}
{{ ROUND4("w5", "w6", "w7", "w4", 8, "0x85845dd1", 21) }}
{{ ROUND4("w4", "w5", "w6", "w7", 15, "0x6fa87e4f", 6) }}
{{ ROUND4("w7", "w4", "w5", "w6", 6, "0xfe2ce6e0", 10) }}
{{ ROUND4("w6", "w7", "w4", "w5", 13, "0xa3014314", 15) }}
{{ ROUND4("w5", "w6", "w7", "w4", 4, "0x4e0811a1", 21) }}
{{ ROUND4("w4", "w5", "w6", "w7", 11, "0xf7537e82", 6) }}
{{ ROUND4("w7", "w4", "w5", "w6", 2, "0xbd3af235", 10) }}
{{ ROUND4("w6", "w7", "w4", "w5", 9, "0x2ad7d2bb", 15) }}
{{ ROUND4("w5", "w6", "w7", "w4", 0, "0xeb86d391", 21) }}

// Add back initial values
add w4, w4, w12
add w5, w5, w13
add w6, w6, w14
add w7, w7, w15

// Move to next block
add x1, x1, #64
cmp x1, x21
b.ne 1b

// Store results back
stp w4, w5, [x0]
stp w6, w7, [x0, #8]

2: // zero/exit
