use crate::cipher::{cbc::CbcEncAble, common_test::*, BlockMode};

struct CbcAesTest {
    name: &'static str,
    key: &'static [u8],
    iv: &'static [u8],
    input: &'static [u8],
    output: &'static [u8],
}

const CBC_AESTESTS: [CbcAesTest; 3] = [
    // NIST SP 800-38A pp 27-29
    CbcAesTest {
        name: "CBC-AES128",
        key: &COMMON_KEY128,
        iv: &COMMON_IV,
        input: &COMMON_INPUT,
        output: &[
            0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9,
            0x19, 0x7d, 0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a,
            0x91, 0x76, 0x78, 0xb2, 0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16,
            0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16, 0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09,
            0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7,
        ],
    },
    CbcAesTest {
        name: "CBC-AES192",
        key: &COMMON_KEY192,
        iv: &COMMON_IV,
        input: &COMMON_INPUT,
        output: &[
            0x4f, 0x02, 0x1d, 0xb2, 0x43, 0xbc, 0x63, 0x3d, 0x71, 0x78, 0x18, 0x3a, 0x9f, 0xa0,
            0x71, 0xe8, 0xb4, 0xd9, 0xad, 0xa9, 0xad, 0x7d, 0xed, 0xf4, 0xe5, 0xe7, 0x38, 0x76,
            0x3f, 0x69, 0x14, 0x5a, 0x57, 0x1b, 0x24, 0x20, 0x12, 0xfb, 0x7a, 0xe0, 0x7f, 0xa9,
            0xba, 0xac, 0x3d, 0xf1, 0x02, 0xe0, 0x08, 0xb0, 0xe2, 0x79, 0x88, 0x59, 0x88, 0x81,
            0xd9, 0x20, 0xa9, 0xe6, 0x4f, 0x56, 0x15, 0xcd,
        ],
    },
    CbcAesTest {
        name: "CBC-AES256",
        key: &COMMON_KEY256,
        iv: &COMMON_IV,
        input: &COMMON_INPUT,
        output: &[
            0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba, 0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b,
            0xfb, 0xd6, 0x9c, 0xfc, 0x4e, 0x96, 0x7e, 0xdb, 0x80, 0x8d, 0x67, 0x9f, 0x77, 0x7b,
            0xc6, 0x70, 0x2c, 0x7d, 0x39, 0xf2, 0x33, 0x69, 0xa9, 0xd9, 0xba, 0xcf, 0xa5, 0x30,
            0xe2, 0x63, 0x04, 0x23, 0x14, 0x61, 0xb2, 0xeb, 0x05, 0xe2, 0xc3, 0x9b, 0xe9, 0xfc,
            0xda, 0x6c, 0x19, 0x07, 0x8c, 0x6a, 0x9d, 0x1b,
        ],
    },
];

#[test]
fn test_cbc_encrypter_aes() {
    for case in CBC_AESTESTS {
        let c = crate::aes::Aes::new(case.key).unwrap().to_cbc_enc(case.iv);
        let mut dst = vec![0u8; case.output.len()];
        c.crypt_blocks(&mut dst, case.input);
        assert_eq!(dst, case.output, "{} failed", case.name)
    }
}
