struct TestVector {
    password: &'static str,
    salt: &'static str,
    n: usize,
    r: usize,
    p: usize,
    output: &'static [u8],
}

static GOOD: &[TestVector] = &[
    TestVector {
        password: "password",
        salt: "salt",
        n: 2,
        r: 10,
        p: 10,
        output: &[
            0x48, 0x2c, 0x85, 0x8e, 0x22, 0x90, 0x55, 0xe6, 0x2f, 0x41, 0xe0, 0xec, 0x81, 0x9a,
            0x5e, 0xe1, 0x8b, 0xdb, 0x87, 0x25, 0x1a, 0x53, 0x4f, 0x75, 0xac, 0xd9, 0x5a, 0xc5,
            0xe5, 0x0a, 0xa1, 0x5f,
        ],
    },
    TestVector {
        password: "password",
        salt: "salt",
        n: 16,
        r: 100,
        p: 100,
        output: &[
            0x88, 0xbd, 0x5e, 0xdb, 0x52, 0xd1, 0xdd, 0x00, 0x18, 0x87, 0x72, 0xad, 0x36, 0x17,
            0x12, 0x90, 0x22, 0x4e, 0x74, 0x82, 0x95, 0x25, 0xb1, 0x8d, 0x73, 0x23, 0xa5, 0x7f,
            0x91, 0x96, 0x3c, 0x37,
        ],
    },
    TestVector {
        password: "this is a long \0 password",
        salt: "and this is a long \0 salt",
        n: 16384,
        r: 8,
        p: 1,
        output: &[
            0xc3, 0xf1, 0x82, 0xee, 0x2d, 0xec, 0x84, 0x6e, 0x70, 0xa6, 0x94, 0x2f, 0xb5, 0x29,
            0x98, 0x5a, 0x3a, 0x09, 0x76, 0x5e, 0xf0, 0x4c, 0x61, 0x29, 0x23, 0xb1, 0x7f, 0x18,
            0x55, 0x5a, 0x37, 0x07, 0x6d, 0xeb, 0x2b, 0x98, 0x30, 0xd6, 0x9d, 0xe5, 0x49, 0x26,
            0x51, 0xe4, 0x50, 0x6a, 0xe5, 0x77, 0x6d, 0x96, 0xd4, 0x0f, 0x67, 0xaa, 0xee, 0x37,
            0xe1, 0x77, 0x7b, 0x8a, 0xd5, 0xc3, 0x11, 0x14, 0x32, 0xbb, 0x3b, 0x6f, 0x7e, 0x12,
            0x64, 0x40, 0x18, 0x79, 0xe6, 0x41, 0xae,
        ],
    },
    TestVector {
        password: "p",
        salt: "s",
        n: 2,
        r: 1,
        p: 1,
        output: &[
            0x48, 0xb0, 0xd2, 0xa8, 0xa3, 0x27, 0x26, 0x11, 0x98, 0x4c, 0x50, 0xeb, 0xd6, 0x30,
            0xaf, 0x52,
        ],
    },
    TestVector {
        password: "",
        salt: "",
        n: 16,
        r: 1,
        p: 1,
        output: &[
            0x77, 0xd6, 0x57, 0x62, 0x38, 0x65, 0x7b, 0x20, 0x3b, 0x19, 0xca, 0x42, 0xc1, 0x8a,
            0x04, 0x97, 0xf1, 0x6b, 0x48, 0x44, 0xe3, 0x07, 0x4a, 0xe8, 0xdf, 0xdf, 0xfa, 0x3f,
            0xed, 0xe2, 0x14, 0x42, 0xfc, 0xd0, 0x06, 0x9d, 0xed, 0x09, 0x48, 0xf8, 0x32, 0x6a,
            0x75, 0x3a, 0x0f, 0xc8, 0x1f, 0x17, 0xe8, 0xd3, 0xe0, 0xfb, 0x2e, 0x0d, 0x36, 0x28,
            0xcf, 0x35, 0xe2, 0x0c, 0x38, 0xd1, 0x89, 0x06,
        ],
    },
    TestVector {
        password: "password",
        salt: "NaCl",
        n: 1024,
        r: 8,
        p: 16,
        output: &[
            0xfd, 0xba, 0xbe, 0x1c, 0x9d, 0x34, 0x72, 0x00, 0x78, 0x56, 0xe7, 0x19, 0x0d, 0x01,
            0xe9, 0xfe, 0x7c, 0x6a, 0xd7, 0xcb, 0xc8, 0x23, 0x78, 0x30, 0xe7, 0x73, 0x76, 0x63,
            0x4b, 0x37, 0x31, 0x62, 0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3, 0x88, 0x6f, 0xf1,
            0x09, 0x27, 0x9d, 0x98, 0x30, 0xda, 0xc7, 0x27, 0xaf, 0xb9, 0x4a, 0x83, 0xee, 0x6d,
            0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40,
        ],
    },
    TestVector {
        password: "pleaseletmein",
        salt: "SodiumChloride",
        n: 16384,
        r: 8,
        p: 1,
        output: &[
            0x70, 0x23, 0xbd, 0xcb, 0x3a, 0xfd, 0x73, 0x48, 0x46, 0x1c, 0x06, 0xcd, 0x81, 0xfd,
            0x38, 0xeb, 0xfd, 0xa8, 0xfb, 0xba, 0x90, 0x4f, 0x8e, 0x3e, 0xa9, 0xb5, 0x43, 0xf6,
            0x54, 0x5d, 0xa1, 0xf2, 0xd5, 0x43, 0x29, 0x55, 0x61, 0x3f, 0x0f, 0xcf, 0x62, 0xd4,
            0x97, 0x05, 0x24, 0x2a, 0x9a, 0xf9, 0xe6, 0x1e, 0x85, 0xdc, 0x0d, 0x65, 0x1e, 0x40,
            0xdf, 0xcf, 0x01, 0x7b, 0x45, 0x57, 0x58, 0x87,
        ],
    },
];

static BAD: &[TestVector] = &[
    TestVector {
        password: "p",
        salt: "s",
        n: 0,
        r: 1,
        p: 1,
        output: &[],
    },
    TestVector {
        password: "p",
        salt: "s",
        n: 1,
        r: 1,
        p: 1,
        output: &[],
    },
    TestVector {
        password: "p",
        salt: "s",
        n: 7,
        r: 8,
        p: 1,
        output: &[],
    },
    TestVector {
        password: "p",
        salt: "s",
        n: 16,
        r: i32::MAX as usize / 2,
        p: i32::MAX as usize / 2,
        output: &[],
    },
];

#[test]
fn test_key() {
    for (i, v) in GOOD.iter().enumerate() {
        let k = super::key(
            v.password.as_bytes(),
            v.salt.as_bytes(),
            v.n,
            v.r,
            v.p,
            v.output.len(),
        );
        match k {
            Ok(result) => {
                if result != v.output {
                    panic!("{}: expected {:x?}, got {:x?}", i, v.output, result);
                }
            }
            Err(err) => {
                panic!("{}: got unexpected error: {}", i, err);
            }
        }
    }

    for (i, v) in BAD.iter().enumerate() {
        let result = super::key(v.password.as_bytes(), v.salt.as_bytes(), v.n, v.r, v.p, 32);
        if result.is_ok() {
            panic!("{}: expected error, got Ok", i);
        }
    }
}
