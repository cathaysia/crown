use super::Rc5;
use crate::block::BlockCipher;

#[test]
fn test_rc5() {
    let cases: [[&[u8]; 3]; 3] = [
        [
            &[
                0x91u8, 0x5f, 0x46, 0x19, 0xbe, 0x41, 0xb2, 0x51, 0x63, 0x55, 0xa5, 0x01, 0x10,
                0xa9, 0xce, 0x91,
            ],
            &[0x21, 0xa5, 0xdb, 0xee, 0x15, 0x4b, 0x8f, 0x6d],
            &[0xf7, 0xc0, 0x13, 0xac, 0x5b, 0x2b, 0x89, 0x52],
        ],
        [
            &[
                0x78, 0x33, 0x48, 0xe7, 0x5a, 0xeb, 0x0f, 0x2f, 0xd7, 0xb1, 0x69, 0xbb, 0x8d, 0xc1,
                0x67, 0x87,
            ],
            &[0xF7, 0xC0, 0x13, 0xAC, 0x5B, 0x2B, 0x89, 0x52],
            &[0x2F, 0x42, 0xB3, 0xB7, 0x03, 0x69, 0xFC, 0x92],
        ],
        [
            &[
                0xDC, 0x49, 0xdb, 0x13, 0x75, 0xa5, 0x58, 0x4f, 0x64, 0x85, 0xb4, 0x13, 0xb5, 0xf1,
                0x2b, 0xaf,
            ],
            &[0x2F, 0x42, 0xB3, 0xB7, 0x03, 0x69, 0xFC, 0x92],
            &[0x65, 0xc1, 0x78, 0xb2, 0x84, 0xd1, 0x97, 0xcc],
        ],
    ];

    for case in cases {
        let [key, pt, ct] = case;
        let cipher = Rc5::new(key, Some(12)).unwrap();
        let mut dst = pt.to_vec();
        cipher.encrypt(&mut dst);
        assert_eq!(dst, ct);
        cipher.decrypt(&mut dst);
        assert_eq!(pt, dst);
    }
}
